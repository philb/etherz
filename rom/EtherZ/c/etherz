#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <kernel.h>
#include "swis.h"
#include "mbuf.h"
#include "dcistructs.h"
#include "types.h"
#include "ksz8851.h"

#define DCI_STATUS_STARTING 0
#define DCI_STATUS_TERMINATING 1

#define INQUIRE_FLAGS (INQ_HWADDRVALID | INQ_HASSTATS)

#define SWI_BASE	0x50500

#define ANY_TYPE	0xffffffff

#define PODULE_BASE 0x3344000
#define KSZ8851_OFFSET 0x3800
#define IRQSTATUS_OFFSET 0x3c00
#define IRQMASK_OFFSET 0x3c04

struct dci_claim
{
	struct dci_claim *next;
	uint32_t pw;
	uint16_t type;
	uint8_t address_level;
	uint8_t error_level;
	void *handler;
	bool unsafe_ok;
};

struct tx_req
{
	struct mbuf *chain;
	size_t length;
	bool driver_frees_chain;	/* Driver always frees first mbuf */
	struct tx_req *next;
};

struct card
{
	struct dib dib;
	bool set_callback;
	unsigned char hw_addr[6];

	struct
	{
		struct dci_claim *normal;
		struct dci_claim *sink;
		struct dci_claim *monitor;
		struct dci_claim *ieee;
	} claims;

	struct ksz8851 ctrl;

	struct
	{
		struct mbctl ctl;
		bool open;
	} mb;

	struct tx_req *tx_queue, *tx_queue_end;
	bool tx_busy;
	void *irq_mask;
	void *priv;
	bool irqs_on;

	struct stats stats;

	struct
	{
		int irqs;
		int tx_release_frames;
		int tx_queued_frames;
		int speed;
		bool mdix;
	} ext_stats;
};

static struct card card;

#define ETH_IRQ_BIT 0x40

#define PodIRQBit          0x20        // mask bit in irqb mask reg
#define PodIRQMaskAddress  0x3200028   // irqb mask reg address

static void card_irq_on(struct card *c)
{
	c->irqs_on = true;
	*((volatile uint8_t *)c->irq_mask) |= ETH_IRQ_BIT;
}

static void card_irq_off(struct card *c)
{
	*((volatile uint8_t *)c->irq_mask) &= ~ETH_IRQ_BIT;
	c->irqs_on = false;
}

static void *rma_alloc(size_t size)
{
	_kernel_swi_regs r;
	r.r[0] = 6;
	r.r[3] = size;
	_kernel_swi(XOS_Bit | OS_Module, &r, &r);
	return (void *)r.r[2];
}

#if 0
static void rma_free(void *ptr)
{
	_kernel_swi_regs r;
	r.r[0] = 7;
	r.r[2] = (int)ptr;
	_kernel_swi(XOS_Bit | OS_Module, &r, &r);
}
#endif

static void kick_transmitter(struct card *c)
{
	if (c->tx_queue)
	{
		struct tx_req *tx = c->tx_queue, *next;
		struct mbuf *mb = tx->chain;
		ksz8851_xmit_frame(&c->ctrl, mb, tx->length);
		c->tx_busy = 1;
		next = tx->next;
		if (tx->driver_frees_chain)
			c->mb.ctl.freem(&c->mb.ctl, mb);
		else	/* Just free the header mbuf */
			c->mb.ctl.free(&c->mb.ctl, mb);
		c->ext_stats.tx_release_frames++;
		free(tx);
		c->tx_queue = next;
		if (next == NULL)
			c->tx_queue_end = NULL;
	}
}

void etherz_frame_dropped(void)
{
	struct card *c = &card;
	c->stats.st_dropped_frames++;
}

void etherz_tx_complete(void)
{
	struct card *c = &card;
	c->tx_busy = false;
	kick_transmitter(c);
}

static void SendDCIDriverStatus(struct card *c, int status)
{
	_kernel_swi_regs r;
	_kernel_oserror *e;
	r.r[0] = (int)&c->dib;
	r.r[1] = Service_DCIDriverStatus;
	r.r[2] = status;
	r.r[3] = DCIVERSION;
	e =_kernel_swi(XOS_Bit | OS_ServiceCall, &r, &r);
}

static void SendDCIFrameTypeFree(struct card *c, struct dci_claim *what)
{
	_kernel_swi_regs r;
	r.r[0] = (int)&c->dib;
	r.r[1] = Service_DCIFrameTypeFree;
	r.r[2] = what->type;
	r.r[3] = what->address_level;
	r.r[4] = what->error_level;
	_kernel_swi(XOS_Bit | OS_ServiceCall, &r, &r);
}

extern void dci_starting_veneer(void);
extern void interrupt_veneer(void);

void dci_starting_veneer_handler(void)
{
	struct card *c = &card;

	c->set_callback = false;
	SendDCIDriverStatus(c, DCI_STATUS_STARTING);
}

static void fill_regs_for_irq(_kernel_swi_regs *r, void *priv)
{
	r->r[0] = 13;
	r->r[1] = (int)interrupt_veneer;
	r->r[2] = (int)priv;
	r->r[3] = PODULE_BASE + IRQSTATUS_OFFSET;
	r->r[4] = ETH_IRQ_BIT;
}

static void start_card(struct card *c)
{
	ksz8851_init_hardware(&c->ctrl);
	ksz8851_set_mac(&c->ctrl, &c->hw_addr[0]);

	{
		_kernel_swi_regs r;
		fill_regs_for_irq(&r, c->priv);
		_kernel_swi(OS_ClaimDeviceVector, &r, &r);
	}

	card_irq_on(c);

	*((volatile uint8_t *)PodIRQMaskAddress) |= PodIRQBit;
}

static void open_mbufmanager(struct card *c)
{
	_kernel_swi_regs r ;

	memset(&c->mb.ctl, 0, sizeof(struct mbctl));

	c->mb.ctl.mbcsize = sizeof(struct mbctl);
	c->mb.ctl.mbcvers = MBUF_MANAGER_VERSION;

	r.r[0] = (int)&c->mb.ctl;

	if (_kernel_swi(XOS_Bit | Mbuf_OpenSession, &r, &r) == NULL)
		c->mb.open = true;
}

static void close_mbufmanager(struct card *c)
{
	_kernel_swi_regs r;
	r.r[0] = (int)&c->mb.ctl;
	_kernel_swi(XOS_Bit | Mbuf_CloseSession, &r, &r);
}

void interrupt_handler(_kernel_swi_regs *r, void *pw)
{
	struct card *c = &card;
	if (!c->irqs_on)
		return;
	c->ext_stats.irqs++;
	card_irq_off(c);
	_kernel_irqs_on();
	ksz8851_interrupt(&c->ctrl);
	_kernel_irqs_off();
	card_irq_on(c);
}

static _kernel_oserror no_hardware = { 0x50500, "EtherZ hardware not present" };

static _kernel_oserror *read_mac_address(struct card *c)
{
	_kernel_swi_regs r;
	_kernel_oserror *err;
	int podule_nr = 1;
	int desc_chunk = -1;
	int addr_chunk = -1;
	size_t desc_size = 0, addr_size = 0;
	char *descp, *addrp;
	bool desc_ok;
	int n;
	int a[6];

	r.r[0] = 0;
	r.r[3] = podule_nr;
	do
	{
		int this_chunk = r.r[0];
		err = _kernel_swi(XOS_Bit | Podule_EnumerateChunks, &r, &r);
		if (err)
			return err;
		if (r.r[2] == 0xf7)
		{
			addr_chunk = this_chunk;
			addr_size = r.r[1];
		}
		else if (r.r[2] == 0xf5)
		{
			desc_chunk = this_chunk;
			desc_size = r.r[1];
		}
	} while (r.r[0] != 0 && (addr_chunk == -1 || desc_chunk == -1));

	if (addr_chunk == -1 || desc_chunk == -1)
		return &no_hardware;

	descp = malloc(desc_size);
	addrp = malloc(addr_size);

	r.r[0] = addr_chunk;
	r.r[2] = (int)addrp;
	err = _kernel_swi(XOS_Bit | Podule_ReadChunk, &r, &r);
	if (err)
	{
		free(descp);
		free(addrp);
		return err;
	}

	r.r[0] = desc_chunk;
	r.r[2] = (int)descp;
	err = _kernel_swi(XOS_Bit | Podule_ReadChunk, &r, &r);
	if (err)
	{
		free(descp);
		free(addrp);
		return err;
	}

	desc_ok = !strncmp(descp, "EtherZ", 6);
	/* Can't scanf directly into c->hw_addr[] because it writes ints not chars. */
	n = sscanf(addrp, "%02x:%02x:%02x:%02x:%02x:%02x", &a[0], &a[1], &a[2], &a[3], &a[4], &a[5]);
	c->hw_addr[0] = a[0];
	c->hw_addr[1] = a[1];
	c->hw_addr[2] = a[2];
	c->hw_addr[3] = a[3];
	c->hw_addr[4] = a[4];
	c->hw_addr[5] = a[5];
	free(descp);
	free(addrp);

	if (!desc_ok || n != 6)
		return &no_hardware;

	return NULL;
}

_kernel_oserror *initialise(char *cmd_tail, int podule_base, void *priv)
{
	struct card *c = &card;
	_kernel_oserror *err;

	c->priv = priv;

	c->dib.dib_swibase = SWI_BASE;
	c->dib.dib_name = (unsigned char *)"ez";
	c->dib.dib_address = c->hw_addr;
	c->dib.dib_module = (unsigned char *)"EtherZ";
	c->dib.dib_location = (unsigned char *)"Internal expansion";
	c->dib.dib_inquire = INQUIRE_FLAGS;

	c->ctrl.base = (char *)PODULE_BASE + KSZ8851_OFFSET;

	err = read_mac_address(c);
	if (err)
		return err;

	c->stats.st_interface_type = ST_TYPE_10BASET;

	c->irq_mask = (char *)PODULE_BASE + IRQMASK_OFFSET;

	{
		_kernel_swi_regs r;
		r.r[0] = (int)dci_starting_veneer;
		r.r[1] = (int)priv;
		_kernel_swi(OS_AddCallBack, &r, &r);
	}

	open_mbufmanager(c);

	if (c->mb.open) {
		start_card(c);
	}

	return NULL;
}

_kernel_oserror *finalise(int fatal, int podule, void *priv)
{
	struct card *c = &card;

	card_irq_off(c);

	if (c->mb.open)
	{
		_kernel_swi_regs r;
		fill_regs_for_irq(&r, priv);
		_kernel_swi(OS_ReleaseDeviceVector, &r, &r);

		close_mbufmanager(c);
	}

	if (c->set_callback)
	{
		// "Can't" happen except in very contrived situations
		_kernel_swi_regs r;
		r.r[0] = (int)dci_starting_veneer;
		r.r[1] = (int)priv;
		_kernel_swi(OS_RemoveCallBack, &r, &r);
		c->set_callback = false;
	}
	else
		SendDCIDriverStatus(c, DCI_STATUS_TERMINATING);
	return NULL;
}

static bool unlink_protocol(struct card *card, uint32_t pw, uint32_t type,
			    struct dci_claim **c)
{
	while (*c)
	{
		struct dci_claim *this = *c;
		if (this->pw == pw && (type == ANY_TYPE || type == this->type))
		{
			struct dci_claim *next = this->next;
			SendDCIFrameTypeFree(card, this);
			free(this);
			*c = next;
			return true;
		}
		c = &(this->next);
	}

	return false;
}

static void service_EnumerateNetworkDrivers(_kernel_swi_regs *r)
{
	struct card *c = &card;
	struct chaindib *chd = rma_alloc(sizeof(*chd));
	chd->chd_next = (struct chaindib *)r->r[0];
	chd->chd_dib = &c->dib;
	r->r[0] = (int)chd;
}

static void service_DCIProtocolStatus(_kernel_swi_regs *r)
{
	struct card *c = &card;
	if (r->r[2] == DCI_STATUS_TERMINATING) {
		/* Protocol module dying */
		unlink_protocol(c, r->r[0], ANY_TYPE, &c->claims.normal);
		unlink_protocol(c, r->r[0], ANY_TYPE, &c->claims.sink);
		unlink_protocol(c, r->r[0], ANY_TYPE, &c->claims.monitor);
	}
}

static void service_MbufManagerStatus(_kernel_swi_regs *r)
{
	struct card *c = &card;
	if (r->r[0] == MbufManagerStatus_Started
	    && !c->mb.open)
	{
		open_mbufmanager(c);
		if (c->mb.open)
			start_card(c);
	}
}

void service(int service_number, _kernel_swi_regs *r, void *priv)
{
	switch (service_number)
	{
	case Service_EnumerateNetworkDrivers:
		service_EnumerateNetworkDrivers(r);
		break;

	case Service_DCIProtocolStatus:
		service_DCIProtocolStatus(r);
		break;

	case Service_MbufManagerStatus:
		service_MbufManagerStatus(r);
		break;
	}
}

static _kernel_oserror bad_mtu = { 0x20e19, "Invalid MTU" };
static _kernel_oserror bad_swi = { SWI_BASE, "Unknown EtherZ SWI" };
static _kernel_oserror no_mbmanager = { SWI_BASE + 1, "MBufManager not present" };
static _kernel_oserror invalid_unit = { 0x20e06, "Invalid unit number" };
static _kernel_oserror wrong_flags = { 0x20e16, "Invalid flags in R0" };
static _kernel_oserror frame_too_long = { 0x20e28, "Frame too long" };
static _kernel_oserror no_mbufs = { 0x20e37, "Not enough mbufs available" };
static _kernel_oserror already_claimed = { 0x20e87, "Frame type already claimed" };
static _kernel_oserror bad_claim = { 0x20e16, "Illegal frame type" };
static _kernel_oserror bad_release = { 0x20e16, "Frame type not claimed" };

#define TRANSMIT_FLAG_USE_SA	0x1
#define TRANSMIT_FLAG_RETAIN	0x2

struct mbuf *etherz_alloc_mbuf(size_t len)
{
	struct card *c = &card;
	return c->mb.ctl.alloc(&c->mb.ctl, len, NULL);
}

void etherz_free_mbuf(struct mbuf *mb)
{
	struct card *c = &card;
	c->mb.ctl.free(&c->mb.ctl, mb);
}

static _kernel_oserror *do_transmit(struct card *c, _kernel_swi_regs *r)
{
	uint16_t type = r->r[2];
	struct mbuf *mb = (struct mbuf *)r->r[3];
	uint8_t *da = (uint8_t *)r->r[4];
	uint8_t *sa = (uint8_t *)r->r[5];
	struct mbuf *hdr;
	uint8_t *hp;
	struct tx_req *tx;
	size_t frame_size;

	if (!c->mb.open)
		return &no_mbmanager;

	if (r->r[1] != 0)
		return &invalid_unit;

	if (r->r[0] & ~(TRANSMIT_FLAG_USE_SA | TRANSMIT_FLAG_RETAIN))
		return &wrong_flags;

	frame_size = c->mb.ctl.count_bytes(&c->mb.ctl, mb);
	if (frame_size > 1500)
		return &frame_too_long;

	/* For reasons passing understanding, we get the Ethernet frame
	   header in registers and must make an mbuf for it ourselves. */
	hdr = etherz_alloc_mbuf(14);
	if (!hdr)
		return &no_mbufs;

	c->stats.st_tx_frames++;
	c->stats.st_tx_bytes += frame_size;

	if (!r->r[0] & TRANSMIT_FLAG_USE_SA)
		sa = &c->hw_addr[0];

	memcpy(&c->stats.st_last_dest_addr[0], da, 6);

	hp = (uint8_t *)hdr + hdr->m_off;
	memcpy(hp, da, 6);
	memcpy(hp + 6, sa, 6);
	hp[12] = type >> 8;
	hp[13] = type & 0xff;
	hdr->m_len = 14;
	tx = malloc(sizeof(*tx));
	tx->length = frame_size + 14;
	tx->driver_frees_chain = (r->r[0] & TRANSMIT_FLAG_RETAIN) ? false : true;
	tx->next = NULL;
	tx->chain = hdr;

	/* If the transmitter is already active, we need to be able to keep the mbuf. */
	/* IRQs are still enabled here so we may race with the transmitter.  But this
	   is safe because the only impact of the race is that we may ensure_safe when
	   we didn't really need to. */
	if (c->tx_busy)
	{
		c->ext_stats.tx_queued_frames++;
		mb = c->mb.ctl.ensure_safe(&c->mb.ctl, mb);
	}

	hdr->m_next = mb;

	card_irq_off(c);
	if (c->tx_queue_end)
		c->tx_queue_end->next = tx;
	else
		c->tx_queue = tx;
	c->tx_queue_end = tx;

	if (!c->tx_busy)
		kick_transmitter(c);
	card_irq_on(c);

	return NULL;
}

static struct dci_claim *find_claim(struct dci_claim *list, uint16_t type)
{
	struct dci_claim *i;
	for (i = list; i; i = i->next)
	{
		if (i->type == type)
			return i;
	}
	return NULL;
}

static struct dci_claim *find_best_claim(struct card *c, uint16_t type)
{
	struct dci_claim *r = NULL;
	if (type < 0x600)
		r = c->claims.ieee;
	else
		r = find_claim(c->claims.normal, type);

	if (r == NULL)
		r = c->claims.monitor;

	if (r == NULL)
		r = c->claims.sink;

	return r;
}

static void call_handler(struct card *c, struct dci_claim *h, struct mbuf *mb)
{
	extern void do_call_handler(struct dib *, struct mbuf *, void *, uint32_t);
	do_call_handler(&c->dib, mb, h->handler, h->pw);
}

void etherz_receive_frame(struct mbuf *mb)
{
	struct card *c = &card;
	uint16_t type;
	uint8_t *p = (uint8_t *)mb + mb->m_off;
	struct dci_claim *handler;
	RxHdr *rxh = (RxHdr *)p;
	type = rxh->rx_frame_type;

	memcpy(&c->stats.st_last_src_addr[0], rxh->rx_src_addr, 6);
	c->stats.st_rx_frames++;

	handler = find_best_claim(c, type);
	if (handler)
		call_handler(c, handler, mb);
	else
		c->mb.ctl.freem(&c->mb.ctl, mb);
}

/*
Filter
SWI (dib_swibase + 5)

On entry:	 R0 = flags (see below)
		 R1 = unit number
		 R2 = frame type
		 R3 = address level (for write)
		 R4 = error level (for write)
		 R5 = private word pointer
		 R6 = address of handler routine for received frames
*/
static struct dci_claim *new_claim(uint8_t address_level, uint8_t error_level,
				   uint32_t pw, void *handler,
				   bool unsafe_ok, uint16_t type)
{
	struct dci_claim *c = malloc(sizeof(*c));
	memset(c, 0, sizeof(c));
	c->handler = handler;
	c->pw = pw;
	c->address_level = address_level;
	c->error_level = error_level;
	c->unsafe_ok = unsafe_ok;
	c->type = type;
	return c;
}

static void free_claim(struct dci_claim **claim)
{
	struct dci_claim *next = (*claim)->next;
	free(*claim);
	*claim = next;
}

static _kernel_oserror *free_normal_claim(struct card *c,
					  uint8_t address_level,
					  uint8_t error_level,
					  uint32_t pw, void *handler,
					  uint16_t type)
{
	struct dci_claim **claim = &c->claims.normal;
	while (*claim)
	{
		struct dci_claim *t = *claim;
		if (t->type == type && t->handler == handler
		    && t->pw == pw && t->address_level == address_level
		    && t->error_level == error_level)
		{
			*claim = t->next;
			free(t);
			return NULL;
		}
		claim = &((*claim)->next);
	}
	return &bad_claim;
}

static _kernel_oserror *do_filter(struct card *c, _kernel_swi_regs *r)
{
	uint16_t level;
	uint16_t type;

	if (r->r[1] != 0)
		return &invalid_unit;

	if (r->r[0] & ~(FILTER_RELEASE | FILTER_NO_UNSAFE))
		return &wrong_flags;

	level = r->r[2] >> 16;
	type = r->r[2] & 0xffff;

	if (!(r->r[0] & FILTER_RELEASE))
	{
		struct dci_claim *claim;
		bool unsafe_ok = (r->r[0] & FILTER_UNSAFE_OK) ? true : false;

		/* New claim */
		switch (level)
		{
		case FRMLVL_E2SPECIFIC:
			if (c->claims.monitor || find_claim(c->claims.normal, type))
				return &already_claimed;
			claim = new_claim(r->r[3], r->r[4], r->r[5], (void *)r->r[6],
					  unsafe_ok, type);
			claim->next = c->claims.normal;
			c->claims.normal = claim;
			break;
		case FRMLVL_E2SINK:
			if (c->claims.sink)
				return &already_claimed;
			claim = new_claim(r->r[3], r->r[4], r->r[5], (void *)r->r[6],
					  unsafe_ok, 0);
			claim->next = c->claims.sink;
			c->claims.sink = claim;
			break;
		case FRMLVL_E2MONITOR:
			if (c->claims.normal || c->claims.sink)
				return &already_claimed;
			claim = new_claim(r->r[3], r->r[4], r->r[5], (void *)r->r[6],
					  unsafe_ok, 0);
			claim->next = c->claims.monitor;
			c->claims.monitor = claim;
			break;
		case FRMLVL_IEEE:
			if (c->claims.ieee)
				return &already_claimed;
			claim = new_claim(r->r[3], r->r[4], r->r[5], (void *)r->r[6],
					  unsafe_ok, type);
			claim->next = c->claims.ieee;
			c->claims.ieee = claim;
			break;
		default:
			return &bad_claim;
		}
	}
	else
	{
		/* Freeing a claim */
		switch (level)
		{
		case FRMLVL_E2SINK:
			if (!c->claims.sink
			    || c->claims.sink->pw != r->r[5])
				return &bad_release;
			free_claim(&c->claims.sink);
			break;
		case FRMLVL_E2MONITOR:
			if (!c->claims.monitor
			    || c->claims.monitor->pw != r->r[5])
				return &bad_release;
			free_claim(&c->claims.monitor);
			break;
		case FRMLVL_IEEE:
			if (!c->claims.ieee
			    || c->claims.ieee->pw != r->r[5])
				return &bad_release;
			free_claim(&c->claims.ieee);
			break;
		case FRMLVL_E2SPECIFIC:
			return free_normal_claim(c, r->r[3], r->r[4],
						 r->r[5], (void *)r->r[6],
						 type);
		default:
			return &bad_release;
		}
	}

	return NULL;
}

static void update_stats(struct card *c)
{
	uint16_t phystat = ksz8851_get_phy_stat(&c->ctrl);
	c->stats.st_link_polarity = (phystat & (1 << 13)) ? 0 : 1;
	c->ext_stats.speed = (phystat & (1 << 10)) ? 100 : 10;
	c->ext_stats.mdix = (phystat & (1 << 7)) ? false : true;
	c->stats.st_link_status = ST_STATUS_OK | ((phystat & (1 << 5)) ? ST_STATUS_ACTIVE : 0);
	c->stats.st_collisions += ksz8851_read_mib(&c->ctrl, 0x1c);
	c->stats.st_excess_collisions += ksz8851_read_mib(&c->ctrl, 0x1d);
	c->stats.st_tx_bytes += ksz8851_read_mib(&c->ctrl, 0x15);
	c->stats.st_rx_bytes += ksz8851_read_mib(&c->ctrl, 0x00);
	c->stats.st_overlong_frames += ksz8851_read_mib(&c->ctrl, 0x04);
	c->stats.st_jabbers += ksz8851_read_mib(&c->ctrl, 0x05);
	c->stats.st_crc_failures += ksz8851_read_mib(&c->ctrl, 0x07);
	c->stats.st_runt_frames += ksz8851_read_mib(&c->ctrl, 0x02);
	c->stats.st_frame_alignment_errors += ksz8851_read_mib(&c->ctrl, 0x08);
}

static _kernel_oserror *do_stats(struct card *c, _kernel_swi_regs *r)
{
	struct stats *stats = (struct stats *)r->r[2];

	if (r->r[1] != 0)
		return &invalid_unit;

	if (r->r[0] & ~1)
		return &wrong_flags;

#define SET(s, x) \
	do { memset(&s->st_##x, 0xff, sizeof(s->st_##x)); } while (0)

	if ((r->r[0] & 1) == 0)
	{
		SET(stats, interface_type);
		SET(stats, link_status);
		SET(stats, link_polarity);
		SET(stats, link_failures);

		SET(stats, collisions);
		SET(stats, excess_collisions);
		SET(stats, tx_frames);
		SET(stats, tx_bytes);
		memset(stats->st_last_dest_addr, 0xff, 6);

		SET(stats, crc_failures);
		SET(stats, frame_alignment_errors);
		SET(stats, dropped_frames);
		SET(stats, runt_frames);
		SET(stats, overlong_frames);
		SET(stats, jabbers);
		SET(stats, rx_frames);
		SET(stats, rx_bytes);
		memset(stats->st_last_src_addr, 0xff, 6);
		return NULL;
	}

	update_stats(c);
	memcpy(stats, &c->stats, sizeof(*stats));

	return NULL;
}

_kernel_oserror *swi(int swi_no, _kernel_swi_regs *r, void *priv)
{
	struct card *c = &card;

	switch (swi_no)
	{
	case DCI4Version:
		r->r[1] = DCIVERSION;
		break;

	case DCI4Inquire:
		r->r[2] = INQUIRE_FLAGS;
		break;

	case DCI4GetNetworkMTU:
		r->r[2] = 1500;
		break;

	case DCI4SetNetworkMTU:
		if (r->r[2] != 1500) {
			return &bad_mtu;
		}
		break;

	case DCI4Transmit:
		return do_transmit(c, r);

	case DCI4Filter:
		return do_filter(c, r);

	case DCI4Stats:
		return do_stats(c, r);

	case 7: /* MulticastRequest */
		break;

	case 0x20: /* ReadRegister */
		r->r[0] = ksz8851_read_reg16(&c->ctrl, r->r[1]);
		break;

	case 0x21: /* WriteRegister */
		ksz8851_write_reg16(&c->ctrl, r->r[1], r->r[0]);
		break;

	case 0x22: /* ReadMIIRegister */
		break;

	case 0x23: /* WriteMIIRegister */
		break;

	default:
		return &bad_swi;
	}
	return NULL;
}

_kernel_oserror *cmd(char *arg_string, int argc, int cmd_no, void *priv)
{
	struct card *c = &card;
	_kernel_oserror *err;

	switch (cmd_no) {
	case 0: /* EZStats */
		{
			char buf[64];
			_kernel_swi_regs r;
			update_stats(c);
			if (c->stats.st_link_status & ST_STATUS_ACTIVE)
			{
				sprintf(buf, "Link up %dMbps MDI%s polarity %s\r\n", c->ext_stats.speed,
					c->ext_stats.mdix ? "-X" : "", c->stats.st_link_polarity ? "normal" : "reversed");
				r.r[0] = (int)buf;
			}
			else
			{
				r.r[0] = (int)"Link down\r\n";
			}
			err = _kernel_swi(XOS_Bit | OS_Write0, &r, &r);
			if (err) return err;
			sprintf(buf, "Interrupts %d\r\n", c->ext_stats.irqs);
			r.r[0] = (int)buf;
			err = _kernel_swi(XOS_Bit | OS_Write0, &r, &r);
			if (err) return err;
			sprintf(buf, "Transmit frames %ld released %d queued %d\r\n", c->stats.st_tx_frames, c->ext_stats.tx_release_frames, c->ext_stats.tx_queued_frames);
			r.r[0] = (int)buf;
			err = _kernel_swi(XOS_Bit | OS_Write0, &r, &r);
			if (err) return err;
		}
		break;
	}
	return NULL;
}
