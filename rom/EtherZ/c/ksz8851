#include <stddef.h>
#include <string.h>
#include <stdio.h>
#include "swis.h"

#include "types.h"
#include "ksz8851.h"
#include "etherz.h"
#include "dcistructs.h"

#define ADDR	0x200
#define DATA	0x0

#define SET_ADDR(dev, addr)						\
	do {								\
		*((volatile uint8_t *)(dev->base + ADDR)) = addr;	\
	} while (0)

#define SET_DATA(dev, data)						\
	do {								\
		*((volatile uint8_t *)(dev->base + DATA)) = data;	\
	} while (0)

#define GET_DATA(dev)					\
	*((volatile uint8_t *)(dev->base + DATA))

#define MARL 0x10
#define MARM 0x12
#define MARH 0x14
#define TXCR 0x70
#define TXCR_FTXQ 0x8000
#define TXCR_TXFCE 0x8
#define TXCR_TXPE 0x4
#define TXCR_TXCE 0x2
#define TXCR_TXE 0x1
#define TXSR 0x72
#define RXCR1 0x74
#define RXCR1_FRXQ 0x8000
#define RXCR1_RXPAFMA 0x800
#define RXCR1_RXFCE 0x400
#define RXCR1_RXEFE 0x200
#define RXCR1_XRMAFMA 0x100
#define RXCR1_RXBE 0x80
#define RXCR1_RXME 0x40  /* all multicast */
#define RXCR1_RXUE 0x20
#define RXCR1_RXAE 0x10 /* promisc */
#define RXCR1_RXE 0x1
#define RXCR2 0x76
#define RXCR2_IUFFP				(1 << 4)
#define RXCR2_RXIUFCEZ				(1 << 3)
#define RXCR2_UDPLFE				(1 << 2)
#define RXCR2_RXICMPFCC				(1 << 1)
#define RXCR2_RXSAF				(1 << 0)
#define TXMIR 0x78
#define RXFHSR 0x7c
#define RXFHSR_RXFV 0x8000
#define RXFHSR_RXCE 0x1
#define RXFHBCR 0x7e
#define TXQCR 0x80
#define TXQCR_METFE 0x1
#define RXQCR 0x82
#define RXQCR_RXFCTE 0x20
#define RXQCR_ADRFE 0x10
#define RXQCR_SDA 0x8
#define TXFDPR 0x84
#define TXFDPR_TXFPAI 0x4000
#define TXFDPR_TXFP 0x7ff
#define RXFDPR 0x86
#define RXFDPR_RXFPAI 0x4000
#define RXFDPR_WST 0x1000
#define RXFDPR_RXFP 0x7ff
#define IER 0x90
#define IER_LCIE 0x8000
#define IER_TXIE 0x4000
#define IER_RXIE 0x2000
#define ISR 0x92
#define ISR_LCIS 0x8000
#define ISR_TXIS 0x4000
#define ISR_RXIS 0x2000
#define RXFCTR 0x9c
#define CIDER 0xc0

#define RXQCR_VAL	(RXQCR_ADRFE | RXQCR_RXFCTE)
#define TXCR_VAL	(TXCR_TXFCE | TXCR_TXPE | TXCR_TXCE | TXCR_TXE)
#if 1
#define RXCR1_VAL	(RXCR1_RXFCE | RXCR1_RXE | RXCR1_RXUE | RXCR1_RXBE | RXCR1_RXME | RXCR1_RXPAFMA)
#else
#define RXCR1_VAL	(RXCR1_RXFCE | RXCR1_RXE | RXCR1_RXAE | 0x2)
#endif
#define RXFDPR_VAL	(RXFDPR_RXFPAI)
#define RXCR2_VAL	(RXCR2_IUFFP | RXCR2_RXIUFCEZ | RXCR2_UDPLFE)

void ksz8851_write_reg16(struct ksz8851 *dev, uint8_t addr, uint16_t val)
{
	SET_ADDR(dev, addr);
	SET_DATA(dev, val & 0xff);
	SET_ADDR(dev, addr+1);
	SET_DATA(dev, val >> 8);
}

uint16_t ksz8851_read_reg16(struct ksz8851 *dev, uint8_t addr)
{
	uint16_t r;
	SET_ADDR(dev, addr);
	r = GET_DATA(dev);
	SET_ADDR(dev, addr + 1);
	r |= (GET_DATA(dev) << 8);
	return r;
}

#define TXIC	0x8000

#define load_data16(dev, x)			\
	do {					\
	SET_DATA(dev, x & 0xff);		\
	SET_DATA(dev, (x >> 8) & 0xff);		\
	} while (0)

void ksz8851_enable_dma(struct ksz8851 *dev)
{
	/* Can't do full 16-bit write here because as soon as we write the
	   low byte the chip will enable DMA and the high byte write will go
	   to the wrong place! */
#if 0
	ksz8851_write_reg16(dev, RXQCR, RXQCR_VAL | RXQCR_SDA);  /* dma mode on */
#else
	SET_ADDR(dev, RXQCR);
	SET_DATA(dev, (RXQCR_VAL | RXQCR_SDA) & 0xff);
#endif
}

void ksz8851_xmit_frame(struct ksz8851 *dev, struct mbuf *mb, size_t length)
{
	uint16_t cw = TXIC | dev->frame_id;
	
	dev->frame_id = (dev->frame_id + 1) & 0x3f;

	ksz8851_enable_dma(dev);
	
	load_data16(dev, cw);
	load_data16(dev, length);
	
	while (mb)
	{
		uint8_t *p = (uint8_t *)mb + mb->m_off;
		size_t plen = mb->m_len;
		while (plen--)
		{
			SET_DATA(dev, *(p++));
		}
		mb = mb->m_next;
	}

	ksz8851_write_reg16(dev, RXQCR, RXQCR_VAL);  /* dma mode off */
	ksz8851_write_reg16(dev, TXQCR, TXQCR_METFE);
}

void ksz8851_set_mac(struct ksz8851 *dev, uint8_t *mac)
{
	ksz8851_write_reg16(dev, MARH, mac[1] | (mac[0] << 8));	
	ksz8851_write_reg16(dev, MARM, mac[3] | (mac[2] << 8));	
	ksz8851_write_reg16(dev, MARL, mac[5] | (mac[4] << 8));	
}

void ksz8851_init_hardware(struct ksz8851 *dev)
{
	ksz8851_write_reg16(dev, 0x26, 1);
	ksz8851_write_reg16(dev, 0x26, 0);
	ksz8851_write_reg16(dev, TXCR, TXCR_FTXQ);
	ksz8851_write_reg16(dev, RXCR1, RXCR1_FRXQ);	
	ksz8851_write_reg16(dev, TXCR, TXCR_VAL);
	ksz8851_write_reg16(dev, RXCR1, RXCR1_VAL);
	ksz8851_write_reg16(dev, RXCR2, RXCR2_VAL);
	ksz8851_write_reg16(dev, RXFCTR, 1);
	ksz8851_write_reg16(dev, RXQCR, RXQCR_VAL);
	ksz8851_write_reg16(dev, RXFDPR, RXFDPR_VAL);
	ksz8851_write_reg16(dev, IER, IER_TXIE | IER_RXIE);
	ksz8851_write_reg16(dev, TXFDPR, TXFDPR_TXFPAI);
}

static void ksz8851_unload_rx(struct ksz8851 *dev)
{
	uint16_t count = ksz8851_read_reg16(dev, RXFCTR) >> 8;
	while (count--)
	{
		uint16_t stat = ksz8851_read_reg16(dev, RXFHSR);
		if ((stat & 0x8000) == 0
		    || (stat & 0x7))
		{
			ksz8851_write_reg16(dev, RXQCR, RXQCR_VAL | 0x1);
			continue;
		}
		else
		{
			uint16_t length = ksz8851_read_reg16(dev, RXFHBCR) & 0xfff;
			int i;
			struct mbuf *hmb = etherz_alloc_mbuf(sizeof(RxHdr));
			struct mbuf *mb;
			uint8_t *p;
			RxHdr *rxh = (RxHdr *)((uint8_t *)hmb + hmb->m_off);
			size_t this_mbuf;
			
			memset(rxh, 0, sizeof(rxh));
			ksz8851_write_reg16(dev, RXFDPR, RXFDPR_VAL);
			hmb->m_len = sizeof(rxh);
			hmb->m_type = MT_HEADER;
			hmb->m_list = NULL;
			ksz8851_enable_dma(dev);
			/* Throw away four useless bytes */
			GET_DATA(dev);
			GET_DATA(dev);
			GET_DATA(dev);
			GET_DATA(dev);
			GET_DATA(dev);
			/* Destination hwaddr */
			p = &rxh->rx_dst_addr[0];
			for (i = 0; i < 6; i++)
				*(p++) = GET_DATA(dev);
			/* Source hwaddr */
			p = &rxh->rx_src_addr[0];
			for (i = 0; i < 6; i++)
				*(p++) = GET_DATA(dev);
			rxh->rx_frame_type = (GET_DATA(dev) << 8);
			rxh->rx_frame_type |= GET_DATA(dev);
			length -= (14 + 4);
			mb = etherz_alloc_mbuf(length);
			mb->m_type = MT_DATA;
			mb->m_list = NULL;
			hmb->m_next = mb;
			p = (uint8_t *)mb + mb->m_off;
			this_mbuf = 0;
			while (length--)
			{
				if (this_mbuf == mb->m_len)
				{
					mb = mb->m_next;
					mb->m_type = MT_DATA;
					mb->m_list = NULL;
					p = (uint8_t *)mb + mb->m_off;
					this_mbuf = 0;
				}
				*(p++) = GET_DATA(dev);
				this_mbuf++;
			}
			mb->m_len = this_mbuf;
			ksz8851_write_reg16(dev, RXQCR, RXQCR_VAL | 0x1);  /* dma mode off */
			etherz_receive_frame(hmb);
		}
	}
}

void ksz8851_interrupt(struct ksz8851 *dev)
{
	uint16_t stat = ksz8851_read_reg16(dev, ISR);
	ksz8851_write_reg16(dev, ISR, stat);
	
	if (stat & ISR_RXIS)
	{
		ksz8851_unload_rx(dev);
	}

	if (stat & ISR_TXIS)
	{
		etherz_tx_complete();
	}
}
