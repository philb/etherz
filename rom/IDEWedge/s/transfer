	AREA    |C$$code|,CODE,READONLY

DATA_LO * 0x2400
DATA_HI * 0x2800

	MACRO
	ReadWord
	ldrb r3, [r10, #DATA_LO - DATA_LO]
	strb r3, [r1], #1
	ldrb r3, [r10, #DATA_HI - DATA_LO]
	strb r3, [r1], #1
	MEND

	MACRO
	Read2Words
	ldrb r3, [r10, #DATA_LO - DATA_LO]
	ldrb r4, [r10, #DATA_HI - DATA_LO]
	orr r3, r3, r4, lsl #8
	ldrb r4, [r10, #DATA_LO - DATA_LO]
	orr r3, r3, r4, lsl #16
	ldrb r4, [r10, #DATA_HI - DATA_LO]
	orr r3, r3, r4, lsl #24
	str r3, [r1], #4
	MEND

	MACRO
	WriteWord
	ldrb r4, [r1, #1]
	strb r4, [r10, #DATA_HI - DATA_LO]
	ldrb r3, [r1], #2
	strb r3, [r10, #DATA_LO - DATA_LO]
	MEND

	MACRO
	Write2Words
	ldr r3, [r1], #4
	mov r4, r3, lsr #8
	strb r4, [r10, #DATA_HI - DATA_LO]
	strb r3, [r10, #DATA_LO - DATA_LO]
	mov r4, r3, lsr #24
	strb r4, [r10, #DATA_HI - DATA_LO]
	mov r4, r3, lsr #16
	strb r4, [r10, #DATA_LO - DATA_LO]
	MEND

;
; Reads up to a sector of data from IDE to RAM.
;
; Entry:
;    R0 = length to transfer > 0
;    R1 -> buffer
;    LR = return address
;    MODE: SVC
;    IRQ state: undefined
;
; Exit:
;    R0 undefined
;    R1 updated
;    All other registers and flags preserved
;    IRQ state preserved but IRQs are enabled during call.

	EXPORT IDEReadSector
IDEReadSector
	stmfd sp!, {r3, r4, r10, r14}
	ldr r10, =0x3344000 + DATA_LO

	teq r0, #0x200
	bne SlowIDERead

	movs r3, r1, lsl #31
	bne ReadSectorAligned8
	bcs ReadSectorAligned16

	; We are reading exactly one sector and the buffer is 32-bit aligned
SectorReadLoop
	Read2Words
	Read2Words
	Read2Words
	Read2Words

	Read2Words
	Read2Words
	Read2Words
	Read2Words
	subs r0, r0, #32
	bne SectorReadLoop
	ldmfd sp!, {r3, r4, r10, pc}^

	; Reading 1 sector but buffer is only 8-bit aligned
ReadSectorAligned8
	; Reading 1 sector but buffer is only 16-bit aligned
ReadSectorAligned16
	; Treat these two cases the same
	ReadWord
	ReadWord
	ReadWord
	ReadWord

	ReadWord
	ReadWord
	ReadWord
	ReadWord

	ReadWord
	ReadWord
	ReadWord
	ReadWord

	ReadWord
	ReadWord
	ReadWord
	ReadWord
	subs r0, r0, #32
	bne ReadSectorAligned16
	ldmfd sp!, {r3, r4, r10, pc}^

	; Reading less than a whole sector
	; Transfer size is guaranteed >0 and <512
	; NOT guaranteed to be a whole number of words and no guaranteed alignment
	; May be writing into application space so we must not overrun the output buffer
SlowIDERead
	cmp r0, #16	; at least 16 bytes to move?
	blt ReadLT16
	ReadWord
	ReadWord
	ReadWord
	ReadWord

	ReadWord
	ReadWord
	ReadWord
	ReadWord
	subs r0, r0, #16
	bne SlowIDERead
	ldmfd sp!, {r3, r4, r10, pc}^

ReadLT16		; 1-15 bytes to move
	ldrb r3, [r10, #DATA_LO - DATA_LO]
	strb r3, [r1], #1
	subs r0, r0, #1
	ldrneb r3, [r10, #DATA_HI - DATA_LO]
	strneb r3, [r1], #1
	subnes r0, r0, #1
	bne ReadLT16
	ldmfd sp!, {r3, r4, r10, pc}^

;
; Writes up to a sector of data from RAM to IDE.
;
; Entry:
;    R0 = length to transfer > 0
;    R1 -> buffer
;    LR = return address
;    MODE: SVC
;    IRQ state: undefined
;
; Exit:
;    R0 undefined
;    R1 updated
;    All other registers and flags preserved
;    IRQ state preserved but IRQs are enabled during call.
	EXPORT IDEWriteSector
IDEWriteSector
	stmfd sp!, {r3, r4, r5, r10, r14}
	ldr r10, =0x3344000 + DATA_LO
	teq r0, #0x200
	bne SlowIDEWrite

	movs r3, r1, lsl #31
	bne WriteSectorAligned8
	bcs WriteSectorAligned16

	; Writing exactly one sector and buffer is 32-bit aligned
SectorWriteLoop
	Write2Words
	Write2Words
	Write2Words
	Write2Words

	Write2Words
	Write2Words
	Write2Words
	Write2Words

	subs r0, r0, #32
	bne SectorWriteLoop
	ldmfd sp!, {r3, r4, r5, r10, pc}^

WriteSectorAligned8
WriteSectorAligned16
	WriteWord
	WriteWord
	WriteWord
	WriteWord

	WriteWord
	WriteWord
	WriteWord
	WriteWord

	WriteWord
	WriteWord
	WriteWord
	WriteWord

	WriteWord
	WriteWord
	WriteWord
	WriteWord
	subs r0, r0, #32
	bne WriteSectorAligned16
	ldmfd sp!, {r3, r4, r5, r10, pc}^

SlowIDEWrite
	; calculate number of bytes of zero-padding needed after valid sector data
	mov r5, #512
	sub r5, r5, r0
	bic r5, r5, #1

Write16
	cmp r0, #16
	blt WriteLT16

	WriteWord
	WriteWord
	WriteWord
	WriteWord

	WriteWord
	WriteWord
	WriteWord
	WriteWord
	subs r0, r0, #2
	bne Write16

WritePadding
	mov r3, #0
WritePadLoop
	strb r3, [r10, #DATA_HI - DATA_LO]
	strb r3, [r10, #DATA_LO - DATA_LO]
	subs r5, r5, #2
	bne WritePadLoop
	ldmfd sp!, {r3, r4, r5, r10, pc}^

WriteLT16
	cmp r0, #2
	bne WriteLast
WriteLoop16
	WriteWord
	subs r0, r0, #2
	beq WritePadding
	cmp r0, #2
	bge WriteLoop16

WriteLast
	mov r3, #0
	strb r3, [r10, #DATA_HI - DATA_LO]
	ldrb r3, [r1], #1
	strb r3, [r10, #DATA_LO - DATA_LO]
	b WritePadding

	END
